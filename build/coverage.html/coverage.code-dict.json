{"/home/travis/build/npmtest/node-npmtest-windows-build-tools/test.js":"/* istanbul instrument in package npmtest_windows_build_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/lib.npmtest_windows_build_tools.js":"/* istanbul instrument in package npmtest_windows_build_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_windows_build_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_windows_build_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-windows-build-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_windows_build_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_windows_build_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_windows_build_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_windows_build_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_windows_build_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_windows_build_tools.__dirname + '/lib.npmtest_windows_build_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/index.js":"'use strict';\n\n// Set verbose mode\n\nif (process.env.npm_config_debug) {\n  process.env.DEBUG = '*';\n}\n\nrequire('./compatible');\n\nvar download = require('./download');\nvar install = require('./install');\nvar environment = require('./environment');\n\n// Here lie the bodies of promises, killed in\n// the name of better garbage collection\ndownload(function () {\n  install(function (variables) {\n    environment(variables);\n  });\n});","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/compatible.js":"'use strict';\n\nmodule.export = function () {\n  if (process.version === 'v7.1.0') {\n    var utils = require('./utils');\n\n    utils.warn('--------------------------------------------------------------');\n    utils.warn('You are running Node v7.1.0, which has a known bug on Windows,');\n    utils.warn('breaking Node applications using the utils (Powershell/CMD).');\n    utils.warn('Please upgrade to a newer version or use Node v7.0.0.\\n\\n');\n    utils.warn('Visit https://github.com/nodejs/node/issues/9542 for details.\\n');\n    utils.warn('windows-build-tools will now run, but might fail.');\n    utils.warn('---------------------------------------------------------------');\n  }\n\n  if (!/^win/.test(process.platform)) {\n    throw new Error('This script upgrades npm on Windows, but the OS is not Windows.');\n  }\n}();","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/constants.js":"'use strict';\n\nvar pythonMirror = process.env['npm_config_python_mirror'] || process.env.PYTHON_MIRROR || 'https://www.python.org/ftp/python/';\n\nvar buildTools = {\n  installerName: 'BuildTools_Full.exe',\n  installerUrl: 'https://download.microsoft.com/download/5/f/7/5f7acaeb-8363-451f-9425-68a90f98b238/visualcppbuildtools_full.exe',\n  logName: 'build-tools-log.txt'\n};\n\nvar python = {\n  installerName: 'python-2.7.11.msi',\n  installerUrl: pythonMirror.replace(/\\/*$/, '/2.7.11/python-2.7.11.msi'),\n  targetName: 'python27',\n  logName: 'python-log.txt'\n};\n\nmodule.exports = {\n  buildTools: buildTools,\n  python: python\n};","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/download.js":"'use strict';\n\nvar nugget = require('nugget');\n\nvar utils = require('./utils');\n\n/**\r\n * Downloads the Visual Studio C++ Build Tools and Python installer to a temporary folder\r\n * at %USERPROFILE%\\.windows-build-tools\r\n *\r\n * @returns {Promise} - Promise\r\n */\nfunction download(cb) {\n  downloadTools(utils.getBuildToolsInstallerPath()).then(function () {\n    return downloadTools(utils.getPythonInstallerPath());\n  }).then(function () {\n    return cb();\n  }).catch(function (error) {\n    return utils.log(error);\n  });\n}\n\n/**\r\n * Downloads specified file with a url from the installer.\r\n *\r\n * @param installer            - An object with fileName, directory, url,\r\n *                                  and destination path of the file to be downloaded\r\n * @returns {Promise.<string>} - Promise resolving with the path to the downloaded file\r\n */\nfunction downloadTools(installer) {\n  return new Promise(function (resolve, reject) {\n    var nuggetOptions = {\n      target: installer.fileName,\n      dir: installer.directory,\n      resume: process.env.npm_config_resume || true,\n      verbose: true,\n      strictSSL: process.env.npm_config_strict_ssl || false,\n      proxy: process.env.npm_config_proxy || process.env.PROXY || undefined,\n      sockets: process.env.npm_config_sockets || undefined\n    };\n\n    nugget(installer.url, nuggetOptions, function (errors) {\n      if (errors) {\n        // nugget returns an array of errors but we only need 1st because we only have 1 url\n        var error = errors[0];\n\n        if (error.message.indexOf('404') === -1) {\n          return reject(error);\n        } else {\n          return reject('Could not find ' + installer.fileName + ' at ' + installer.url);\n        }\n      }\n\n      utils.log('Downloaded ' + installer.fileName + '. Saved to ' + installer.path + '.');\n      resolve(installer.path);\n    });\n  });\n}\n\nmodule.exports = download;","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/environment.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\n/**\r\n * Uses PowerShell to configure the environment for\r\n * msvs_version 2015 and npm python 2.7\r\n *\r\n * @params variables an object with paths for different environmental variables\r\n *\r\n * @returns {Promise}\r\n */\nfunction setEnvironment(variables) {\n  var pythonPath = path.join(variables.python.pythonPath);\n  var pythonExePath = path.join(pythonPath, 'python.exe');\n  var scriptPath = path.join(__dirname, '..', 'ps1', 'set-environment.ps1');\n  var maybeAddToPath = process.env.npm_config_add_python_to_path ? ' -AddPythonToPath' : '';\n  var psArgs = '& {& \\'' + scriptPath + '\\' -pythonPath \\'' + pythonPath + '\\' -pythonExePath \\'' + pythonExePath + '\\'' + maybeAddToPath + ' }';\n  var args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];\n\n  return utils.executeChildProcess('powershell.exe', args);\n}\n\nmodule.exports = setEnvironment;","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/utils.js":"'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\n\nvar constants = require('./constants');\n\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {string} - Path to windows-build-tools working dir\r\n */\nfunction getWorkDirectory() {\n  var homeDir = process.env.USERPROFILE || require('os').homedir();\n  var workDir = path.join(homeDir, '.windows-build-tools');\n\n  try {\n    fs.ensureDirSync(workDir);\n    return workDir;\n  } catch (err) {\n    log(err);\n  }\n}\n\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {Object} - Object containing path and fileName of installer\r\n */\nfunction getBuildToolsInstallerPath() {\n  var directory = getWorkDirectory();\n  var buildTools = constants.buildTools;\n\n  return {\n    path: path.join(directory, buildTools.installerName),\n    fileName: buildTools.installerName,\n    url: buildTools.installerUrl,\n    logPath: path.join(directory, buildTools.logName),\n    directory: directory\n  };\n}\n\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {Object} - Object containing path and fileName of installer for python\r\n */\nfunction getPythonInstallerPath() {\n  var directory = getWorkDirectory();\n  var python = constants.python;\n\n  return {\n    path: path.join(directory, python.installerName),\n    fileName: python.installerName,\n    url: python.installerUrl,\n    logPath: path.join(directory, python.logName),\n    targetPath: path.join(directory, python.targetName),\n    directory: directory\n  };\n}\n\n/**\r\n * Ensures that the currently running platform is Windows,\r\n * exiting the process if it is not\r\n */\nfunction ensureWindows() {\n  if (process.platform !== 'win32') {\n    log('This tool requires Windows.\\n');\n    process.exit(1);\n  }\n}\n\n/**\r\n * Starts a child process using the provided executable\r\n *\r\n * @param fileName      - Path to the executable to start\r\n * @returns {Promise}   - A promise that resolves when the\r\n *                      process exits\r\n */\nfunction executeChildProcess(fileName, args) {\n  return new Promise(function (resolve, reject) {\n    var child = require('child_process').spawn(fileName, args);\n\n    child.on('exit', function (code) {\n      if (code !== 0) {\n        return reject(new Error(fileName + ' exited with code: ' + code));\n      }\n      return resolve();\n    });\n\n    child.stdin.end();\n  });\n}\n\n/**\r\n * Log, unless logging is disabled. Parameters identical with console.log.\r\n */\nfunction log() {\n  if (!process.env.npm_config_disable_logging) {\n    console.log.apply(this, arguments);\n  }\n}\n\n/**\r\n * Warn, unless logging is disabled. Parameters identical with console.error.\r\n */\nfunction warn() {\n  if (!process.env.npm_config_disable_logging) {\n    console.warn.apply(this, arguments);\n  }\n}\n\n/**\r\n * Error, unless logging is disabled. arameters identical with console.error.\r\n */\nfunction error() {\n  if (!process.env.npm_config_disable_logging) {\n    console.error.apply(this, arguments);\n  }\n}\n\nmodule.exports = {\n  getWorkDirectory: getWorkDirectory,\n  getBuildToolsInstallerPath: getBuildToolsInstallerPath,\n  getPythonInstallerPath: getPythonInstallerPath,\n  ensureWindows: ensureWindows,\n  executeChildProcess: executeChildProcess,\n  log: log,\n  warn: warn,\n  error: error\n};","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/compatible.js":"module.export = (function () {\r\n  if (process.version === 'v7.1.0') {\r\n    const utils = require('./utils')\r\n\r\n    utils.warn('--------------------------------------------------------------')\r\n    utils.warn('You are running Node v7.1.0, which has a known bug on Windows,')\r\n    utils.warn('breaking Node applications using the utils (Powershell/CMD).')\r\n    utils.warn('Please upgrade to a newer version or use Node v7.0.0.\\n\\n')\r\n    utils.warn('Visit https://github.com/nodejs/node/issues/9542 for details.\\n')\r\n    utils.warn('windows-build-tools will now run, but might fail.')\r\n    utils.warn('---------------------------------------------------------------')\r\n  }\r\n\r\n  if (!/^win/.test(process.platform)) {\r\n    throw new Error('This script upgrades npm on Windows, but the OS is not Windows.')\r\n  }\r\n}())\r\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/download.js":"'use strict'\r\n\r\nconst nugget = require('nugget')\r\n\r\nconst utils = require('./utils')\r\n\r\n/**\r\n * Downloads the Visual Studio C++ Build Tools and Python installer to a temporary folder\r\n * at %USERPROFILE%\\.windows-build-tools\r\n *\r\n * @returns {Promise} - Promise\r\n */\r\nfunction download (cb) {\r\n  downloadTools(utils.getBuildToolsInstallerPath())\r\n    .then(() => downloadTools(utils.getPythonInstallerPath()))\r\n    .then(() => cb())\r\n    .catch((error) => utils.log(error))\r\n}\r\n\r\n/**\r\n * Downloads specified file with a url from the installer.\r\n *\r\n * @param installer            - An object with fileName, directory, url,\r\n *                                  and destination path of the file to be downloaded\r\n * @returns {Promise.<string>} - Promise resolving with the path to the downloaded file\r\n */\r\nfunction downloadTools (installer) {\r\n  return new Promise((resolve, reject) => {\r\n    const nuggetOptions = {\r\n      target: installer.fileName,\r\n      dir: installer.directory,\r\n      resume: process.env.npm_config_resume || true,\r\n      verbose: true,\r\n      strictSSL: process.env.npm_config_strict_ssl || false,\r\n      proxy: process.env.npm_config_proxy || process.env.PROXY || undefined,\r\n      sockets: process.env.npm_config_sockets || undefined\r\n    }\r\n\r\n    nugget(installer.url, nuggetOptions, (errors) => {\r\n      if (errors) {\r\n        // nugget returns an array of errors but we only need 1st because we only have 1 url\r\n        const error = errors[0]\r\n\r\n        if (error.message.indexOf('404') === -1) {\r\n          return reject(error)\r\n        } else {\r\n          return reject(`Could not find ${installer.fileName} at ${installer.url}`)\r\n        }\r\n      }\r\n\r\n      utils.log(`Downloaded ${installer.fileName}. Saved to ${installer.path}.`)\r\n      resolve(installer.path)\r\n    })\r\n  })\r\n}\r\n\r\nmodule.exports = download\r\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/environment.js":"'use strict'\r\n\r\nconst path = require('path')\r\nconst utils = require('./utils')\r\n\r\n/**\r\n * Uses PowerShell to configure the environment for\r\n * msvs_version 2015 and npm python 2.7\r\n *\r\n * @params variables an object with paths for different environmental variables\r\n *\r\n * @returns {Promise}\r\n */\r\nfunction setEnvironment (variables) {\r\n  const pythonPath = path.join(variables.python.pythonPath)\r\n  const pythonExePath = path.join(pythonPath, 'python.exe')\r\n  const scriptPath = path.join(__dirname, '..', 'ps1', 'set-environment.ps1')\r\n  const maybeAddToPath = process.env.npm_config_add_python_to_path ? ' -AddPythonToPath' : ''\r\n  const psArgs = `& {& '${scriptPath}' -pythonPath '${pythonPath}' -pythonExePath '${pythonExePath}'${maybeAddToPath} }`\r\n  const args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs]\r\n\r\n  return utils.executeChildProcess('powershell.exe', args)\r\n}\r\n\r\nmodule.exports = setEnvironment\r\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/utils.js":"'use strict'\r\n\r\nconst fs = require('fs-extra')\r\nconst path = require('path')\r\n\r\nconst constants = require('./constants')\r\n\r\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {string} - Path to windows-build-tools working dir\r\n */\r\nfunction getWorkDirectory () {\r\n  const homeDir = process.env.USERPROFILE || require('os').homedir()\r\n  const workDir = path.join(homeDir, '.windows-build-tools')\r\n\r\n  try {\r\n    fs.ensureDirSync(workDir)\r\n    return workDir\r\n  } catch (err) {\r\n    log(err)\r\n  }\r\n}\r\n\r\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {Object} - Object containing path and fileName of installer\r\n */\r\nfunction getBuildToolsInstallerPath () {\r\n  const directory = getWorkDirectory()\r\n  const buildTools = constants.buildTools\r\n\r\n  return {\r\n    path: path.join(directory, buildTools.installerName),\r\n    fileName: buildTools.installerName,\r\n    url: buildTools.installerUrl,\r\n    logPath: path.join(directory, buildTools.logName),\r\n    directory\r\n  }\r\n}\r\n\r\n/**\r\n * Ensures that %USERPROFILE%/.windows-build-tools exists\r\n * and returns the path to it\r\n *\r\n * @returns {Object} - Object containing path and fileName of installer for python\r\n */\r\nfunction getPythonInstallerPath () {\r\n  const directory = getWorkDirectory()\r\n  const python = constants.python\r\n\r\n  return {\r\n    path: path.join(directory, python.installerName),\r\n    fileName: python.installerName,\r\n    url: python.installerUrl,\r\n    logPath: path.join(directory, python.logName),\r\n    targetPath: path.join(directory, python.targetName),\r\n    directory\r\n  }\r\n}\r\n\r\n/**\r\n * Ensures that the currently running platform is Windows,\r\n * exiting the process if it is not\r\n */\r\nfunction ensureWindows () {\r\n  if (process.platform !== 'win32') {\r\n    log('This tool requires Windows.\\n')\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n/**\r\n * Starts a child process using the provided executable\r\n *\r\n * @param fileName      - Path to the executable to start\r\n * @returns {Promise}   - A promise that resolves when the\r\n *                      process exits\r\n */\r\nfunction executeChildProcess (fileName, args) {\r\n  return new Promise((resolve, reject) => {\r\n    const child = require('child_process').spawn(fileName, args)\r\n\r\n    child.on('exit', (code) => {\r\n      if (code !== 0) {\r\n        return reject(new Error(fileName + ' exited with code: ' + code))\r\n      }\r\n      return resolve()\r\n    })\r\n\r\n    child.stdin.end()\r\n  })\r\n}\r\n\r\n/**\r\n * Log, unless logging is disabled. Parameters identical with console.log.\r\n */\r\nfunction log () {\r\n  if (!process.env.npm_config_disable_logging) {\r\n    console.log.apply(this, arguments)\r\n  }\r\n}\r\n\r\n/**\r\n * Warn, unless logging is disabled. Parameters identical with console.error.\r\n */\r\nfunction warn () {\r\n  if (!process.env.npm_config_disable_logging) {\r\n    console.warn.apply(this, arguments)\r\n  }\r\n}\r\n\r\n/**\r\n * Error, unless logging is disabled. arameters identical with console.error.\r\n */\r\nfunction error () {\r\n  if (!process.env.npm_config_disable_logging) {\r\n    console.error.apply(this, arguments)\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getWorkDirectory,\r\n  getBuildToolsInstallerPath,\r\n  getPythonInstallerPath,\r\n  ensureWindows,\r\n  executeChildProcess,\r\n  log,\r\n  warn,\r\n  error\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/index.js":"'use strict'\r\n\r\n// Set verbose mode\r\nif (process.env.npm_config_debug) {\r\n  process.env.DEBUG = '*'\r\n}\r\n\r\nrequire('./compatible')\r\n\r\nconst download = require('./download')\r\nconst install = require('./install')\r\nconst environment = require('./environment')\r\n\r\n// Here lie the bodies of promises, killed in\r\n// the name of better garbage collection\r\ndownload(function () {\r\n  install(function (variables) {\r\n    environment(variables)\r\n  })\r\n})\r\n","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/install/index.js":"'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar debug = require('debug')('windows-build-tools');\nvar chalk = require('chalk');\nvar Spinner = require('cli-spinner').Spinner;\n\nvar launchInstaller = require('./launch');\nvar Tailer = require('./tailer');\nvar utils = require('../utils');\n\nvar spinner = void 0;\n\n/**\r\n * Installs the build tools, tailing the installation log file\r\n * to understand what's happening\r\n *\r\n * @returns {Promise.<Object>} - Promise that resolves with the installation result\r\n */\n\nfunction install(cb) {\n  utils.log(chalk.green('Starting installation...'));\n\n  launchInstaller().then(function () {\n    return launchSpinner();\n  }).then(function () {\n    return Promise.all([installBuildTools(), installPython()]);\n  }).then(function (paths) {\n    stopSpinner();\n\n    var variables = {\n      buildTools: paths[0],\n      python: paths[1]\n    };\n    cb(variables);\n  }).catch(function (error) {\n    stopSpinner();\n\n    utils.log(error);\n  });\n}\n\nfunction stopSpinner() {\n  if (spinner) {\n    spinner.stop(false);\n  }\n}\n\nfunction launchSpinner() {\n  utils.log('Launched installers, now waiting for them to finish.');\n  utils.log('This will likely take some time - please be patient!');\n\n  spinner = new Spinner('Waiting for installers... %s');\n  spinner.setSpinnerDelay(180);\n  spinner.start();\n}\n\nfunction installBuildTools() {\n  return new Promise(function (resolve, reject) {\n    var tailer = new Tailer(utils.getBuildToolsInstallerPath().logPath);\n\n    tailer.on('exit', function (result, details) {\n      debug('build tools tailer exited');\n      if (result === 'error') {\n        debug('Installer: Tailer found error with installer', details);\n        reject(err);\n      }\n\n      if (result === 'success') {\n        utils.log(chalk.bold.green('Successfully installed Visual Studio Build Tools.'));\n        debug('Installer: Successfully installed Visual Studio Build Tools according to tailer');\n        resolve();\n      }\n\n      if (result === 'failure') {\n        utils.log(chalk.bold.red('Could not install Visual Studio Build Tools.'));\n        utils.log('Please find more details in the log files, which can be found at');\n        utils.log(utils.getWorkDirectory());\n        debug('Installer: Failed to install according to tailer');\n        resolve();\n      }\n    });\n\n    tailer.start();\n  });\n}\n\nfunction installPython() {\n  return new Promise(function (resolve, reject) {\n    // The log file for msiexe is utf-16\n    var tailer = new Tailer(utils.getPythonInstallerPath().logPath, 'ucs2');\n\n    tailer.on('exit', function (result, details) {\n      debug('python tailer exited');\n      if (result === 'error') {\n        debug('Installer: Tailer found error with installer', details);\n        reject(err);\n      }\n\n      if (result === 'success') {\n        utils.log(chalk.bold.green('Successfully installed Python 2.7'));\n        debug('Installer: Successfully installed Python 2.7 according to tailer');\n\n        var variables = {\n          pythonPath: details || utils.getPythonInstallerPath().targetPath\n        };\n        resolve(variables);\n      }\n\n      if (result === 'failure') {\n        utils.log(chalk.bold.red('Could not install Python 2.7.'));\n        utils.log('Please find more details in the log files, which can be found at');\n        utils.log(utils.getWorkDirectory());\n        debug('Installer: Failed to install Python 2.7 according to tailer');\n        resolve(undefined);\n      }\n    });\n\n    tailer.start();\n  });\n}\n\nmodule.exports = install;","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/install/launch.js":"'use strict';\n\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar chalk = require('chalk');\nvar debug = require('debug')('windows-build-tools');\n\nvar utils = require('../utils');\nvar installer = utils.getBuildToolsInstallerPath();\n\n/**\r\n * Launches the installer, using a PS1 script as a middle-man\r\n *\r\n * @returns {Promise.<Object>} - Promise that resolves with the launch-installer result\r\n */\nfunction launchInstaller() {\n  return new Promise(function (resolve, reject) {\n    var extraArgs = '';\n    var parsedArgs = {};\n\n    if (process.env.npm_config_vcc_build_tools_parameters) {\n      try {\n        parsedArgs = JSON.parse(process.env.npm_config_vcc_build_tools_parameters);\n\n        if (parsedArgs && parsedArgs.length > 0) {\n          extraArgs = parsedArgs.join('%_; ');\n        }\n      } catch (e) {\n        debug('Installer: Parsing additional arguments for VCC build tools failed: ' + JSON.stringify(e));\n        debug('Input received: ' + process.env.npm_config_vcc_build_tools_parameters);\n      }\n    }\n\n    var scriptPath = path.join(__dirname, '..', '..', 'ps1', 'launch-installer.ps1');\n    var psArgs = '& {& \\'' + scriptPath + '\\' -path \\'' + installer.directory + '\\' -extraBuildToolsParameters \\'' + extraArgs + '\\' }';\n    var args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];\n\n    debug('Installer: Launching installer in ' + installer.directory + ' with file ' + installer.fileName);\n\n    var child = void 0;\n\n    try {\n      child = spawn('powershell.exe', args);\n    } catch (error) {\n      return reject(error);\n    }\n\n    child.stdout.on('data', function (data) {\n      debug('Installer: Stdout from launch-installer.ps1: ' + data.toString());\n\n      if (data.toString().includes('Please restart this script from an administrative PowerShell!')) {\n        utils.log(chalk.bold.red('Please restart this script from an administrative PowerShell!'));\n        utils.log('The build tools cannot be installed without administrative rights.');\n        utils.log('To fix, right-click on PowerShell and run \"as Administrator\".');\n\n        // Bail out\n        process.exit(1);\n      }\n    });\n\n    child.on('exit', function () {\n      return resolve();\n    });\n    child.stdin.end();\n  });\n}\n\nmodule.exports = launchInstaller;","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/lib/install/tailer.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar path = require('path');\nvar fs = require('fs-extra');\nvar debug = require('debug')('windows-build-tools');\nvar EventEmitter = require('events');\n\nvar utils = require('../utils');\n\nvar Tailer = function (_EventEmitter) {\n  _inherits(Tailer, _EventEmitter);\n\n  function Tailer(logfile) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n\n    _classCallCheck(this, Tailer);\n\n    var _this = _possibleConstructorReturn(this, (Tailer.__proto__ || Object.getPrototypeOf(Tailer)).call(this));\n\n    _this.logFile = logfile;\n    _this.encoding = encoding;\n    return _this;\n  }\n\n  /**\r\n   * Starts watching a the logfile\r\n   */\n\n\n  _createClass(Tailer, [{\n    key: 'start',\n    value: function start() {\n      debug('Tail: Waiting for log file to appear in ' + this.logFile);\n      this.waitForLogFile();\n    }\n\n    /**\r\n     * Stop watching\r\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      debug.apply(undefined, ['Tail: Stopping'].concat(args));\n      this.emit.apply(this, ['exit'].concat(args));\n      clearInterval(this.tail);\n    }\n\n    /**\r\n     * Start tailing things\r\n     */\n\n  }, {\n    key: 'tail',\n    value: function tail() {\n      var _this2 = this;\n\n      debug('Tail: Tailing ' + this.logFile);\n      this.tail = setInterval(function () {\n        _this2.handleData();\n      }, 30000);\n    }\n\n    /**\r\n     * Handle data and see if there's something we'd like to report\r\n     */\n\n  }, {\n    key: 'handleData',\n    value: function handleData() {\n      var data = void 0;\n\n      try {\n        data = fs.readFileSync(this.logFile, this.encoding);\n      } catch (err) {\n        debug('Tail start: Could not read logfile ' + this.logFile + ': ' + err);\n      }\n\n      // Success strings for build tools\n      if (data.includes('Variable: IsInstalled = 1') || data.includes('Variable: BuildTools_Core_Installed = ') || data.includes('WixBundleInstalled = 1')) {\n        this.stop('success');\n        // Success strings for python\n      } else if (data.includes('INSTALL. Return value 1') || data.includes('Installation completed successfully') || data.includes('Configuration completed successfully')) {\n        // Finding the python installation path from the log file\n        var matches = data.match(/Property\\(S\\): TARGETDIR = (.*)\\r\\n/);\n        var pythonPath = undefined;\n\n        if (matches) {\n          pythonPath = matches[1];\n        }\n        this.stop('success', pythonPath);\n      } else if (data.includes('Shutting down, exit code:')) {\n        this.stop('failure');\n      }\n\n      // Aid garbage collector\n      data = undefined;\n    }\n\n    /**\r\n     * Waits for a given file, resolving when it's available\r\n     *\r\n     * @param file {string} - Path to file\r\n     * @returns {Promise.<Object>} - Promise resolving with fs.stats object\r\n     */\n\n  }, {\n    key: 'waitForLogFile',\n    value: function waitForLogFile() {\n      var _this3 = this;\n\n      fs.lstat(this.logFile, function (err, stats) {\n        if (err && err.code === 'ENOENT') {\n          debug('Tail: waitForFile: still waiting');\n          setTimeout(_this3.waitForLogFile.bind(_this3), 2000);\n        } else if (err) {\n          debug('Tail: waitForFile: Unexpected error', err);\n          throw new Error(err);\n        } else {\n          debug('Tail: waitForFile: Found ' + _this3.logFile);\n          _this3.tail();\n        }\n      });\n    }\n  }]);\n\n  return Tailer;\n}(EventEmitter);\n\nmodule.exports = Tailer;","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/install/index.js":"'use strict'\r\n\r\nconst fs = require('fs-extra')\r\nconst path = require('path')\r\nconst spawn = require('child_process').spawn\r\nconst debug = require('debug')('windows-build-tools')\r\nconst chalk = require('chalk')\r\nconst Spinner = require('cli-spinner').Spinner\r\n\r\nconst launchInstaller = require('./launch')\r\nconst Tailer = require('./tailer')\r\nconst utils = require('../utils')\r\n\r\nlet spinner\r\n\r\n/**\r\n * Installs the build tools, tailing the installation log file\r\n * to understand what's happening\r\n *\r\n * @returns {Promise.<Object>} - Promise that resolves with the installation result\r\n */\r\n\r\nfunction install (cb) {\r\n  utils.log(chalk.green('Starting installation...'))\r\n\r\n  launchInstaller()\r\n    .then(() => launchSpinner())\r\n    .then(() => Promise.all([installBuildTools(), installPython()]))\r\n    .then((paths) => {\r\n      stopSpinner()\r\n\r\n      const variables = {\r\n        buildTools: paths[0],\r\n        python: paths[1]\r\n      }\r\n      cb(variables)\r\n    })\r\n    .catch((error) => {\r\n      stopSpinner()\r\n\r\n      utils.log(error)\r\n    })\r\n}\r\n\r\nfunction stopSpinner() {\r\n  if (spinner) {\r\n    spinner.stop(false)\r\n  }\r\n}\r\n\r\nfunction launchSpinner() {\r\n  utils.log('Launched installers, now waiting for them to finish.')\r\n  utils.log('This will likely take some time - please be patient!')\r\n\r\n  spinner = new Spinner(`Waiting for installers... %s`)\r\n  spinner.setSpinnerDelay(180)\r\n  spinner.start()\r\n}\r\n\r\nfunction installBuildTools () {\r\n  return new Promise((resolve, reject) => {\r\n    const tailer = new Tailer(utils.getBuildToolsInstallerPath().logPath)\r\n\r\n    tailer.on('exit', (result, details) => {\r\n      debug('build tools tailer exited');\r\n      if (result === 'error') {\r\n        debug('Installer: Tailer found error with installer', details)\r\n        reject(err)\r\n      }\r\n\r\n      if (result === 'success') {\r\n        utils.log(chalk.bold.green('Successfully installed Visual Studio Build Tools.'))\r\n        debug('Installer: Successfully installed Visual Studio Build Tools according to tailer')\r\n        resolve()\r\n      }\r\n\r\n      if (result === 'failure') {\r\n        utils.log(chalk.bold.red('Could not install Visual Studio Build Tools.'))\r\n        utils.log('Please find more details in the log files, which can be found at')\r\n        utils.log(utils.getWorkDirectory())\r\n        debug('Installer: Failed to install according to tailer')\r\n        resolve()\r\n      }\r\n    })\r\n\r\n    tailer.start()\r\n  })\r\n}\r\n\r\nfunction installPython () {\r\n  return new Promise((resolve, reject) => {\r\n    // The log file for msiexe is utf-16\r\n    const tailer = new Tailer(utils.getPythonInstallerPath().logPath, 'ucs2')\r\n\r\n    tailer.on('exit', (result, details) => {\r\n      debug('python tailer exited');\r\n      if (result === 'error') {\r\n        debug('Installer: Tailer found error with installer', details)\r\n        reject(err)\r\n      }\r\n\r\n      if (result === 'success') {\r\n        utils.log(chalk.bold.green('Successfully installed Python 2.7'))\r\n        debug('Installer: Successfully installed Python 2.7 according to tailer')\r\n\r\n        var variables = {\r\n          pythonPath: details || utils.getPythonInstallerPath().targetPath\r\n        }\r\n        resolve(variables)\r\n      }\r\n\r\n      if (result === 'failure') {\r\n        utils.log(chalk.bold.red('Could not install Python 2.7.'))\r\n        utils.log('Please find more details in the log files, which can be found at')\r\n        utils.log(utils.getWorkDirectory())\r\n        debug('Installer: Failed to install Python 2.7 according to tailer')\r\n        resolve(undefined)\r\n      }\r\n    })\r\n\r\n    tailer.start()\r\n  })\r\n}\r\n\r\nmodule.exports = install","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/install/launch.js":"'use strict'\r\n\r\nconst path = require('path')\r\nconst spawn = require('child_process').spawn\r\nconst chalk = require('chalk')\r\nconst debug = require('debug')('windows-build-tools')\r\n\r\nconst utils = require('../utils')\r\nconst installer = utils.getBuildToolsInstallerPath()\r\n\r\n/**\r\n * Launches the installer, using a PS1 script as a middle-man\r\n *\r\n * @returns {Promise.<Object>} - Promise that resolves with the launch-installer result\r\n */\r\nfunction launchInstaller () {\r\n  return new Promise((resolve, reject) => {\r\n    let extraArgs = ''\r\n    let parsedArgs = {}\r\n\r\n    if (process.env.npm_config_vcc_build_tools_parameters) {\r\n      try {\r\n        parsedArgs = JSON.parse(process.env.npm_config_vcc_build_tools_parameters)\r\n\r\n        if (parsedArgs && parsedArgs.length > 0) {\r\n          extraArgs = parsedArgs.join('%_; ')\r\n        }\r\n      } catch (e) {\r\n        debug(`Installer: Parsing additional arguments for VCC build tools failed: ${JSON.stringify(e)}`)\r\n        debug(`Input received: ${process.env.npm_config_vcc_build_tools_parameters}`)\r\n      }\r\n    }\r\n\r\n\r\n    const scriptPath = path.join(__dirname, '..', '..', 'ps1', 'launch-installer.ps1')\r\n    const psArgs = `& {& '${scriptPath}' -path '${installer.directory}' -extraBuildToolsParameters '${extraArgs}' }`\r\n    const args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs]\r\n\r\n    debug(`Installer: Launching installer in ${installer.directory} with file ${installer.fileName}`)\r\n\r\n    let child\r\n\r\n    try {\r\n      child = spawn('powershell.exe', args)\r\n    } catch (error) {\r\n      return reject(error)\r\n    }\r\n\r\n    child.stdout.on('data', (data) => {\r\n      debug(`Installer: Stdout from launch-installer.ps1: ${data.toString()}`)\r\n\r\n      if (data.toString().includes('Please restart this script from an administrative PowerShell!')) {\r\n        utils.log(chalk.bold.red('Please restart this script from an administrative PowerShell!'))\r\n        utils.log('The build tools cannot be installed without administrative rights.')\r\n        utils.log('To fix, right-click on PowerShell and run \"as Administrator\".')\r\n\r\n        // Bail out\r\n        process.exit(1)\r\n      }\r\n    })\r\n\r\n    child.on('exit', () => resolve())\r\n    child.stdin.end()\r\n  })\r\n}\r\n\r\nmodule.exports = launchInstaller","/home/travis/build/npmtest/node-npmtest-windows-build-tools/node_modules/windows-build-tools/src/install/tailer.js":"'use strict'\r\n\r\nconst path = require('path')\r\nconst fs = require('fs-extra')\r\nconst debug = require('debug')('windows-build-tools')\r\nconst EventEmitter = require('events')\r\n\r\nconst utils = require('../utils')\r\n\r\nclass Tailer extends EventEmitter {\r\n  constructor(logfile, encoding = 'utf8') {\r\n    super()\r\n    this.logFile = logfile\r\n    this.encoding = encoding\r\n  }\r\n\r\n  /**\r\n   * Starts watching a the logfile\r\n   */\r\n  start() {\r\n    debug(`Tail: Waiting for log file to appear in ${this.logFile}`)\r\n    this.waitForLogFile()\r\n  }\r\n\r\n  /**\r\n   * Stop watching\r\n   */\r\n  stop(...args) {\r\n    debug(`Tail: Stopping`, ...args)\r\n    this.emit('exit', ...args)\r\n    clearInterval(this.tail)\r\n  }\r\n\r\n  /**\r\n   * Start tailing things\r\n   */\r\n  tail() {\r\n    debug(`Tail: Tailing ${this.logFile}`)\r\n    this.tail = setInterval(() => {\r\n      this.handleData()\r\n    }, 30000)\r\n  }\r\n\r\n  /**\r\n   * Handle data and see if there's something we'd like to report\r\n   */\r\n  handleData() {\r\n    let data\r\n\r\n    try {\r\n      data = fs.readFileSync(this.logFile, this.encoding)\r\n    } catch (err) {\r\n      debug(`Tail start: Could not read logfile ${this.logFile}: ${err}`)\r\n    }\r\n\r\n    // Success strings for build tools\r\n    if (data.includes('Variable: IsInstalled = 1') ||\r\n        data.includes('Variable: BuildTools_Core_Installed = ') ||\r\n        data.includes('WixBundleInstalled = 1')) {\r\n      this.stop('success')\r\n    // Success strings for python\r\n    } else if (data.includes('INSTALL. Return value 1') ||\r\n        data.includes('Installation completed successfully') ||\r\n        data.includes('Configuration completed successfully')) {\r\n      // Finding the python installation path from the log file\r\n      const matches = data.match(/Property\\(S\\): TARGETDIR = (.*)\\r\\n/)\r\n      let pythonPath = undefined\r\n\r\n      if (matches) {\r\n        pythonPath = matches[1]\r\n      }\r\n      this.stop('success', pythonPath)\r\n    } else if (data.includes('Shutting down, exit code:')) {\r\n      this.stop('failure')\r\n    }\r\n\r\n    // Aid garbage collector\r\n    data = undefined\r\n  }\r\n\r\n  /**\r\n   * Waits for a given file, resolving when it's available\r\n   *\r\n   * @param file {string} - Path to file\r\n   * @returns {Promise.<Object>} - Promise resolving with fs.stats object\r\n   */\r\n  waitForLogFile() {\r\n    fs.lstat(this.logFile, (err, stats) => {\r\n      if (err && err.code === 'ENOENT') {\r\n        debug('Tail: waitForFile: still waiting')\r\n        setTimeout(this.waitForLogFile.bind(this), 2000)\r\n      } else if (err) {\r\n        debug('Tail: waitForFile: Unexpected error', err)\r\n        throw new Error(err);\r\n      } else {\r\n        debug(`Tail: waitForFile: Found ${this.logFile}`)\r\n        this.tail()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Tailer\r\n"}